In this lecture we are discussing about hierarachy of exception:
-- In Java, exceptions are objects that represent exceptional situations that can occur during program execution. 
The Java language provides a hierarchy of exception classes that are used to represent different types of errors and exceptional situations.

#Important points
-- Every class extends Object class so, Throwable class by default extends Object
-- The top-level class in the Java exception hierarchy is the Throwable class. All exception classes in Java are subclasses of the Throwable class.
-- The Throwable class has two subclasses: Error and Exception. 
-- The Error class represents serious errors that cannot be handled by the program, such as OutOfMemoryError or StackOverflowError.
-- The Exception class represents exceptions that can be caught and handled by the program.
-- The Exception class has many subclasses that represent specific types of exceptions. Some common subclasses of Exception include RuntimeException, IOException, SQLException, and NullPointerException.
-- Exception classes in Java can be either checked or unchecked.

Checked Exception:
Checked exceptions are those that are checked at compile-time, meaning the compiler ensures that the programmer handles the exception by either catching or declaring it in the method signature using the throws keyword. 
Examples of checked exceptions include IOException, SQLException, and ClassNotFoundException.

UnChecked Exception:
unchecked exceptions are not checked at compile-time, and the compiler does not force the programmer to handle them. Examples of unchecked exceptions include NullPointerException, ArrayIndexOutOfBoundsException, and
ArithmeticException.

hierrachry of exception
      Object class
            |
        Throwable
---------       ---------
|                       |
Error               Exception 
             -----------    ----------------------------------------------
            |                                   |                        |
        RuntimeEception(uncheked)          SQLException(checked)       IOException(checked)
            ArithmeticException
            NullPointerException
            ArrayIndexOutOfBoundsException
-----------------------------------------------------------------------------------
                        THROW AND throws
    ----------------------------------------------------------------------------------------


                        In this lecture we are discussing throw keyword :
#1 
-- throw keyword in Java is used to explicitly throw an exception. 
When an exception is thrown using the throw keyword, the execution of the current method is stopped.

syntax-
throw new NullPointerException("Object is null");

e.g
public void divide(int a, int b) {
  if (b == 0) {
    throw new ArithmeticException("Cannot divide by zero");
  }
  int result = a / b;
  System.out.println(result);
}

#2
-- throw keyword is used to throw exceptions, not to catch them. To catch exceptions, you need to use a try-catch block.
-- if you do not use try-catch then the control is passed, where the method is called.
-- when you want to pass message to an exception 
then you should use the parametrized constructor instead non parameterized constructor 
e.g
class Main{
   public static void main(String []args){
      int a=0;
      try{
         if(a==0)
throw new ArithmeticException("a should not be zero"); // throw new ArithmeticException() is non parametrized constructor
      }
      catch(ArithmeticException e){
         System.out.println("Exception caught: "+e);
      }
    
   }
}

Output: Exception caught: java.lang.ArithmeticException: a should not be zero


class Main{
   public static void main(String[] args){
      int j=30;
      int i=1;
     try{
      j=18/i;
      //handle the exception using throw
      if(j==0)
         throw new ArithmeticException("i donot want to print 0"); //try to create an exception 
     }
     catch(ArithmeticException e){//here catch is catching the exception
        System.out.println("ArithmeticException caught");
        System.out.println(e.getMessage()); //getMessage() method use to get the message
     }
       catch(Exception e){
          System.out.println("Exception caught");
       }
     
   }
}










